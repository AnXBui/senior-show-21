input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Awards {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  senior: Senior
  published_at: DateTime
}

type AwardsConnection {
  values: [Awards]
  groupBy: AwardsGroupBy
  aggregate: AwardsAggregator
}

type AwardsAggregator {
  count: Int
  totalCount: Int
}

type AwardsGroupBy {
  id: [AwardsConnectionId]
  created_at: [AwardsConnectionCreated_at]
  updated_at: [AwardsConnectionUpdated_at]
  name: [AwardsConnectionName]
  senior: [AwardsConnectionSenior]
  published_at: [AwardsConnectionPublished_at]
}

type AwardsConnectionId {
  key: ID
  connection: AwardsConnection
}

type AwardsConnectionCreated_at {
  key: DateTime
  connection: AwardsConnection
}

type AwardsConnectionUpdated_at {
  key: DateTime
  connection: AwardsConnection
}

type AwardsConnectionName {
  key: String
  connection: AwardsConnection
}

type AwardsConnectionSenior {
  key: ID
  connection: AwardsConnection
}

type AwardsConnectionPublished_at {
  key: DateTime
  connection: AwardsConnection
}

input AwardInput {
  name: String!
  senior: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAwardInput {
  name: String
  senior: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAwardInput {
  data: AwardInput
}

type createAwardPayload {
  award: Awards
}

input updateAwardInput {
  where: InputID
  data: editAwardInput
}

type updateAwardPayload {
  award: Awards
}

input deleteAwardInput {
  where: InputID
}

type deleteAwardPayload {
  award: Awards
}

type Senior {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  bio: String!
  website: String!
  signature: UploadFile
  avatar: UploadFile
  photo: UploadFile
  index: Int!
  projects_list: [ComponentProjectsProject]
  social_media: [ComponentSocialSocialLink]
  thumbnail: UploadFile
  last: String
  published_at: DateTime
  awards(sort: String, limit: Int, start: Int, where: JSON): [Awards]
}

type SeniorConnection {
  values: [Senior]
  groupBy: SeniorGroupBy
  aggregate: SeniorAggregator
}

type SeniorAggregator {
  count: Int
  totalCount: Int
  sum: SeniorAggregatorSum
  avg: SeniorAggregatorAvg
  min: SeniorAggregatorMin
  max: SeniorAggregatorMax
}

type SeniorAggregatorSum {
  index: Float
}

type SeniorAggregatorAvg {
  index: Float
}

type SeniorAggregatorMin {
  index: Float
}

type SeniorAggregatorMax {
  index: Float
}

type SeniorGroupBy {
  id: [SeniorConnectionId]
  created_at: [SeniorConnectionCreated_at]
  updated_at: [SeniorConnectionUpdated_at]
  name: [SeniorConnectionName]
  bio: [SeniorConnectionBio]
  website: [SeniorConnectionWebsite]
  signature: [SeniorConnectionSignature]
  avatar: [SeniorConnectionAvatar]
  photo: [SeniorConnectionPhoto]
  index: [SeniorConnectionIndex]
  thumbnail: [SeniorConnectionThumbnail]
  last: [SeniorConnectionLast]
  published_at: [SeniorConnectionPublished_at]
}

type SeniorConnectionId {
  key: ID
  connection: SeniorConnection
}

type SeniorConnectionCreated_at {
  key: DateTime
  connection: SeniorConnection
}

type SeniorConnectionUpdated_at {
  key: DateTime
  connection: SeniorConnection
}

type SeniorConnectionName {
  key: String
  connection: SeniorConnection
}

type SeniorConnectionBio {
  key: String
  connection: SeniorConnection
}

type SeniorConnectionWebsite {
  key: String
  connection: SeniorConnection
}

type SeniorConnectionSignature {
  key: ID
  connection: SeniorConnection
}

type SeniorConnectionAvatar {
  key: ID
  connection: SeniorConnection
}

type SeniorConnectionPhoto {
  key: ID
  connection: SeniorConnection
}

type SeniorConnectionIndex {
  key: Int
  connection: SeniorConnection
}

type SeniorConnectionThumbnail {
  key: ID
  connection: SeniorConnection
}

type SeniorConnectionLast {
  key: String
  connection: SeniorConnection
}

type SeniorConnectionPublished_at {
  key: DateTime
  connection: SeniorConnection
}

input SeniorInput {
  name: String!
  bio: String!
  website: String!
  signature: ID
  avatar: ID
  photo: ID
  index: Int
  projects_list: [ComponentProjectsProjectInput]
  social_media: [ComponentSocialSocialLinkInput]
  thumbnail: ID
  awards: [ID]
  last: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSeniorInput {
  name: String
  bio: String
  website: String
  signature: ID
  avatar: ID
  photo: ID
  index: Int
  projects_list: [editComponentProjectsProjectInput]
  social_media: [editComponentSocialSocialLinkInput]
  thumbnail: ID
  awards: [ID]
  last: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSeniorInput {
  data: SeniorInput
}

type createSeniorPayload {
  senior: Senior
}

input updateSeniorInput {
  where: InputID
  data: editSeniorInput
}

type updateSeniorPayload {
  senior: Senior
}

input deleteSeniorInput {
  where: InputID
}

type deleteSeniorPayload {
  senior: Senior
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

enum ENUM_COMPONENTPROJECTSPROJECTTAG_TAG {
  web
  ui
  interactive
  print
  editorial
  packaging
  exhibition
  environmental
  motion
  branding
  typography
  illustration
  capstone
}

type ComponentProjectsProjectTag {
  id: ID!
  tag: ENUM_COMPONENTPROJECTSPROJECTTAG_TAG
}

input ComponentProjectsProjectTagInput {
  tag: ENUM_COMPONENTPROJECTSPROJECTTAG_TAG
}

input editComponentProjectsProjectTagInput {
  id: ID
  tag: ENUM_COMPONENTPROJECTSPROJECTTAG_TAG
}

type ComponentProjectsProject {
  id: ID!
  title: String!
  project_tag: [ComponentProjectsProjectTag]
  index: Int!
  video: String
  gallery(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentProjectsProjectInput {
  title: String!
  project_tag: [ComponentProjectsProjectTagInput!]
  index: Int
  video: String
  gallery: [ID]
}

input editComponentProjectsProjectInput {
  id: ID
  title: String
  project_tag: [editComponentProjectsProjectTagInput]
  index: Int
  video: String
  gallery: [ID]
}

enum ENUM_COMPONENTSOCIALSOCIALLINK_TYPE {
  facebook
  instagram
  linkedin
  dribble
  behance
}

type ComponentSocialSocialLink {
  id: ID!
  type: ENUM_COMPONENTSOCIALSOCIALLINK_TYPE!
  link: String!
}

input ComponentSocialSocialLinkInput {
  type: ENUM_COMPONENTSOCIALSOCIALLINK_TYPE!
  link: String!
}

input editComponentSocialSocialLinkInput {
  id: ID
  type: ENUM_COMPONENTSOCIALSOCIALLINK_TYPE
  link: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Awards | AwardsConnection | AwardsAggregator | AwardsGroupBy | AwardsConnectionId | AwardsConnectionCreated_at | AwardsConnectionUpdated_at | AwardsConnectionName | AwardsConnectionSenior | AwardsConnectionPublished_at | createAwardPayload | updateAwardPayload | deleteAwardPayload | Senior | SeniorConnection | SeniorAggregator | SeniorAggregatorSum | SeniorAggregatorAvg | SeniorAggregatorMin | SeniorAggregatorMax | SeniorGroupBy | SeniorConnectionId | SeniorConnectionCreated_at | SeniorConnectionUpdated_at | SeniorConnectionName | SeniorConnectionBio | SeniorConnectionWebsite | SeniorConnectionSignature | SeniorConnectionAvatar | SeniorConnectionPhoto | SeniorConnectionIndex | SeniorConnectionThumbnail | SeniorConnectionLast | SeniorConnectionPublished_at | createSeniorPayload | updateSeniorPayload | deleteSeniorPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentProjectsProjectTag | ComponentProjectsProject | ComponentSocialSocialLink

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  award(id: ID!, publicationState: PublicationState): Awards
  awards(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Awards]
  awardsConnection(sort: String, limit: Int, start: Int, where: JSON): AwardsConnection
  senior(id: ID!, publicationState: PublicationState): Senior
  seniors(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Senior]
  seniorsConnection(sort: String, limit: Int, start: Int, where: JSON): SeniorConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAward(input: createAwardInput): createAwardPayload
  updateAward(input: updateAwardInput): updateAwardPayload
  deleteAward(input: deleteAwardInput): deleteAwardPayload
  createSenior(input: createSeniorInput): createSeniorPayload
  updateSenior(input: updateSeniorInput): updateSeniorPayload
  deleteSenior(input: deleteSeniorInput): deleteSeniorPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
